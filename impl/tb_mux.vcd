$date
	Tue Nov 22 08:06:41 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_mux $end
$var wire 16 ! o_val [0:15] $end
$var reg 1 " sel $end
$var reg 16 # val0 [0:15] $end
$var reg 16 $ val1 [0:15] $end
$scope module mux0 $end
$var wire 1 " i_sel $end
$var wire 16 % i_val0 [0:15] $end
$var wire 16 & i_val1 [0:15] $end
$var wire 16 ' o_val [0:15] $end
$scope module mux_bit0 $end
$var wire 1 " i_sel $end
$var wire 1 ( i_val0 $end
$var wire 1 ) i_val1 $end
$var wire 1 * o_val $end
$upscope $end
$scope module mux_bit1 $end
$var wire 1 " i_sel $end
$var wire 1 + i_val0 $end
$var wire 1 , i_val1 $end
$var wire 1 - o_val $end
$upscope $end
$scope module mux_bit10 $end
$var wire 1 " i_sel $end
$var wire 1 . i_val0 $end
$var wire 1 / i_val1 $end
$var wire 1 0 o_val $end
$upscope $end
$scope module mux_bit11 $end
$var wire 1 " i_sel $end
$var wire 1 1 i_val0 $end
$var wire 1 2 i_val1 $end
$var wire 1 3 o_val $end
$upscope $end
$scope module mux_bit12 $end
$var wire 1 " i_sel $end
$var wire 1 4 i_val0 $end
$var wire 1 5 i_val1 $end
$var wire 1 6 o_val $end
$upscope $end
$scope module mux_bit13 $end
$var wire 1 " i_sel $end
$var wire 1 7 i_val0 $end
$var wire 1 8 i_val1 $end
$var wire 1 9 o_val $end
$upscope $end
$scope module mux_bit14 $end
$var wire 1 " i_sel $end
$var wire 1 : i_val0 $end
$var wire 1 ; i_val1 $end
$var wire 1 < o_val $end
$upscope $end
$scope module mux_bit15 $end
$var wire 1 " i_sel $end
$var wire 1 = i_val0 $end
$var wire 1 > i_val1 $end
$var wire 1 ? o_val $end
$upscope $end
$scope module mux_bit2 $end
$var wire 1 " i_sel $end
$var wire 1 @ i_val0 $end
$var wire 1 A i_val1 $end
$var wire 1 B o_val $end
$upscope $end
$scope module mux_bit3 $end
$var wire 1 " i_sel $end
$var wire 1 C i_val0 $end
$var wire 1 D i_val1 $end
$var wire 1 E o_val $end
$upscope $end
$scope module mux_bit4 $end
$var wire 1 " i_sel $end
$var wire 1 F i_val0 $end
$var wire 1 G i_val1 $end
$var wire 1 H o_val $end
$upscope $end
$scope module mux_bit5 $end
$var wire 1 " i_sel $end
$var wire 1 I i_val0 $end
$var wire 1 J i_val1 $end
$var wire 1 K o_val $end
$upscope $end
$scope module mux_bit6 $end
$var wire 1 " i_sel $end
$var wire 1 L i_val0 $end
$var wire 1 M i_val1 $end
$var wire 1 N o_val $end
$upscope $end
$scope module mux_bit7 $end
$var wire 1 " i_sel $end
$var wire 1 O i_val0 $end
$var wire 1 P i_val1 $end
$var wire 1 Q o_val $end
$upscope $end
$scope module mux_bit8 $end
$var wire 1 " i_sel $end
$var wire 1 R i_val0 $end
$var wire 1 S i_val1 $end
$var wire 1 T o_val $end
$upscope $end
$scope module mux_bit9 $end
$var wire 1 " i_sel $end
$var wire 1 U i_val0 $end
$var wire 1 V i_val1 $end
$var wire 1 W o_val $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
x,
x+
x*
x)
x(
bx '
bx &
bx %
bx $
bx #
x"
bx !
$end
#5
0*
0-
00
13
06
19
0<
1?
0B
0E
0H
0K
0N
1Q
0T
b100010101 !
b100010101 '
0W
0)
0,
0A
0D
0G
0J
0M
0P
1S
1V
1/
02
15
08
1;
0>
0(
0+
0@
0C
0F
0I
0L
1O
0R
0U
0.
11
04
17
0:
1=
0"
b11101010 $
b11101010 &
b100010101 #
b100010101 %
#10
10
03
16
09
1<
0?
0Q
1T
b11101010 !
b11101010 '
1W
1"
#15
13
19
1?
b111111111 !
b111111111 '
1Q
0S
0V
0/
12
05
1>
1R
1U
1.
14
1:
0"
b10011 $
b10011 &
b111111111 #
b111111111 %
#20
00
06
09
0Q
0T
b10011 !
b10011 '
0W
1"
