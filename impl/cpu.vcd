$date
	Tue Nov 22 08:12:05 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var reg 1 ! clock $end
$scope module c $end
$var wire 16 " BUS [0:15] $end
$var wire 1 ! i_clock $end
$var wire 16 # w_TInData [0:15] $end
$var wire 1 $ w_TWCtrl $end
$var wire 16 % w_stkAddr [0:15] $end
$var wire 1 & w_stkWCtrl $end
$var wire 1 ' w_stkSCtrl $end
$var wire 1 ( w_stkAddrSel $end
$var wire 3 ) w_spCtrl [0:2] $end
$var wire 16 * w_spAddr [0:15] $end
$var wire 18 + w_progInstruction [0:17] $end
$var wire 16 , w_nextInstr [0:15] $end
$var wire 2 - w_jSelCtrl [0:1] $end
$var wire 6 . w_jCtrl [0:5] $end
$var wire 16 / w_jCondVal [0:15] $end
$var wire 1 0 w_instrTypeCtrl $end
$var wire 5 1 w_instrOP [0:4] $end
$var wire 16 2 w_instrAddr [0:15] $end
$var wire 16 3 w_incInstrAddr [0:15] $end
$var wire 1 4 w_currCarry $end
$var wire 1 5 w_cond $end
$var wire 1 6 w_carryWCtrl $end
$var wire 16 7 w_aluT [0:15] $end
$var wire 16 8 w_aluS [0:15] $end
$var wire 16 9 w_aluOut [0:15] $end
$var wire 5 : w_aluOP [0:4] $end
$var wire 1 ; w_aluCarry $end
$var wire 1 < w_TIn $end
$var wire 1 = w_RWCtrl $end
$var wire 1 > w_RSCtrl $end
$var wire 16 ? w_ROut [0:15] $end
$scope module IPMux $end
$var wire 16 @ o_val [0:15] $end
$var wire 16 A i_val1 [0:15] $end
$var wire 16 B i_val0 [0:15] $end
$var wire 1 5 i_sel $end
$scope module mux_bit0 $end
$var wire 1 C i_val0 $end
$var wire 1 D i_val1 $end
$var wire 1 E o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit1 $end
$var wire 1 F i_val0 $end
$var wire 1 G i_val1 $end
$var wire 1 H o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit10 $end
$var wire 1 I i_val0 $end
$var wire 1 J i_val1 $end
$var wire 1 K o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit11 $end
$var wire 1 L i_val0 $end
$var wire 1 M i_val1 $end
$var wire 1 N o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit12 $end
$var wire 1 O i_val0 $end
$var wire 1 P i_val1 $end
$var wire 1 Q o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit13 $end
$var wire 1 R i_val0 $end
$var wire 1 S i_val1 $end
$var wire 1 T o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit14 $end
$var wire 1 U i_val0 $end
$var wire 1 V i_val1 $end
$var wire 1 W o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit15 $end
$var wire 1 X i_val0 $end
$var wire 1 Y i_val1 $end
$var wire 1 Z o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit2 $end
$var wire 1 [ i_val0 $end
$var wire 1 \ i_val1 $end
$var wire 1 ] o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit3 $end
$var wire 1 ^ i_val0 $end
$var wire 1 _ i_val1 $end
$var wire 1 ` o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit4 $end
$var wire 1 a i_val0 $end
$var wire 1 b i_val1 $end
$var wire 1 c o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit5 $end
$var wire 1 d i_val0 $end
$var wire 1 e i_val1 $end
$var wire 1 f o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit6 $end
$var wire 1 g i_val0 $end
$var wire 1 h i_val1 $end
$var wire 1 i o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit7 $end
$var wire 1 j i_val0 $end
$var wire 1 k i_val1 $end
$var wire 1 l o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit8 $end
$var wire 1 m i_val0 $end
$var wire 1 n i_val1 $end
$var wire 1 o o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$scope module mux_bit9 $end
$var wire 1 p i_val0 $end
$var wire 1 q i_val1 $end
$var wire 1 r o_val $end
$var wire 1 5 i_sel $end
$upscope $end
$upscope $end
$scope module OPMux $end
$var wire 5 s i_val1 [0:4] $end
$var wire 5 t o_val [0:4] $end
$var wire 5 u i_val0 [0:4] $end
$var wire 1 0 i_sel $end
$scope module mux_bit0 $end
$var wire 1 v i_val0 $end
$var wire 1 w i_val1 $end
$var wire 1 x o_val $end
$var wire 1 0 i_sel $end
$upscope $end
$scope module mux_bit1 $end
$var wire 1 y i_val0 $end
$var wire 1 z i_val1 $end
$var wire 1 { o_val $end
$var wire 1 0 i_sel $end
$upscope $end
$scope module mux_bit2 $end
$var wire 1 | i_val0 $end
$var wire 1 } i_val1 $end
$var wire 1 ~ o_val $end
$var wire 1 0 i_sel $end
$upscope $end
$scope module mux_bit3 $end
$var wire 1 !" i_val0 $end
$var wire 1 "" i_val1 $end
$var wire 1 #" o_val $end
$var wire 1 0 i_sel $end
$upscope $end
$scope module mux_bit4 $end
$var wire 1 $" i_val0 $end
$var wire 1 %" i_val1 $end
$var wire 1 &" o_val $end
$var wire 1 0 i_sel $end
$upscope $end
$upscope $end
$scope module SPMux $end
$var wire 16 '" o_val [0:15] $end
$var wire 16 (" i_val1 [0:15] $end
$var wire 16 )" i_val0 [0:15] $end
$var wire 1 ( i_sel $end
$scope module mux_bit0 $end
$var wire 1 *" i_val0 $end
$var wire 1 +" i_val1 $end
$var wire 1 ," o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit1 $end
$var wire 1 -" i_val0 $end
$var wire 1 ." i_val1 $end
$var wire 1 /" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit10 $end
$var wire 1 0" i_val0 $end
$var wire 1 1" i_val1 $end
$var wire 1 2" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit11 $end
$var wire 1 3" i_val0 $end
$var wire 1 4" i_val1 $end
$var wire 1 5" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit12 $end
$var wire 1 6" i_val0 $end
$var wire 1 7" i_val1 $end
$var wire 1 8" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit13 $end
$var wire 1 9" i_val0 $end
$var wire 1 :" i_val1 $end
$var wire 1 ;" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit14 $end
$var wire 1 <" i_val0 $end
$var wire 1 =" i_val1 $end
$var wire 1 >" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit15 $end
$var wire 1 ?" i_val0 $end
$var wire 1 @" i_val1 $end
$var wire 1 A" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit2 $end
$var wire 1 B" i_val0 $end
$var wire 1 C" i_val1 $end
$var wire 1 D" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit3 $end
$var wire 1 E" i_val0 $end
$var wire 1 F" i_val1 $end
$var wire 1 G" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit4 $end
$var wire 1 H" i_val0 $end
$var wire 1 I" i_val1 $end
$var wire 1 J" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit5 $end
$var wire 1 K" i_val0 $end
$var wire 1 L" i_val1 $end
$var wire 1 M" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit6 $end
$var wire 1 N" i_val0 $end
$var wire 1 O" i_val1 $end
$var wire 1 P" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit7 $end
$var wire 1 Q" i_val0 $end
$var wire 1 R" i_val1 $end
$var wire 1 S" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit8 $end
$var wire 1 T" i_val0 $end
$var wire 1 U" i_val1 $end
$var wire 1 V" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$scope module mux_bit9 $end
$var wire 1 W" i_val0 $end
$var wire 1 X" i_val1 $end
$var wire 1 Y" o_val $end
$var wire 1 ( i_sel $end
$upscope $end
$upscope $end
$scope module TInMux $end
$var wire 16 Z" i_val0 [0:15] $end
$var wire 16 [" i_val1 [0:15] $end
$var wire 16 \" o_val [0:15] $end
$var wire 1 < i_sel $end
$scope module mux_bit0 $end
$var wire 1 ]" i_val0 $end
$var wire 1 ^" i_val1 $end
$var wire 1 _" o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit1 $end
$var wire 1 `" i_val0 $end
$var wire 1 a" i_val1 $end
$var wire 1 b" o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit10 $end
$var wire 1 c" i_val0 $end
$var wire 1 d" i_val1 $end
$var wire 1 e" o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit11 $end
$var wire 1 f" i_val0 $end
$var wire 1 g" i_val1 $end
$var wire 1 h" o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit12 $end
$var wire 1 i" i_val0 $end
$var wire 1 j" i_val1 $end
$var wire 1 k" o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit13 $end
$var wire 1 l" i_val0 $end
$var wire 1 m" i_val1 $end
$var wire 1 n" o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit14 $end
$var wire 1 o" i_val0 $end
$var wire 1 p" i_val1 $end
$var wire 1 q" o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit15 $end
$var wire 1 r" i_val0 $end
$var wire 1 s" i_val1 $end
$var wire 1 t" o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit2 $end
$var wire 1 u" i_val0 $end
$var wire 1 v" i_val1 $end
$var wire 1 w" o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit3 $end
$var wire 1 x" i_val0 $end
$var wire 1 y" i_val1 $end
$var wire 1 z" o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit4 $end
$var wire 1 {" i_val0 $end
$var wire 1 |" i_val1 $end
$var wire 1 }" o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit5 $end
$var wire 1 ~" i_val0 $end
$var wire 1 !# i_val1 $end
$var wire 1 "# o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit6 $end
$var wire 1 ## i_val0 $end
$var wire 1 $# i_val1 $end
$var wire 1 %# o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit7 $end
$var wire 1 &# i_val0 $end
$var wire 1 '# i_val1 $end
$var wire 1 (# o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit8 $end
$var wire 1 )# i_val0 $end
$var wire 1 *# i_val1 $end
$var wire 1 +# o_val $end
$var wire 1 < i_sel $end
$upscope $end
$scope module mux_bit9 $end
$var wire 1 ,# i_val0 $end
$var wire 1 -# i_val1 $end
$var wire 1 .# o_val $end
$var wire 1 < i_sel $end
$upscope $end
$upscope $end
$scope module alu $end
$var wire 1 /# M $end
$var wire 4 0# s [0:3] $end
$var wire 16 1# b [0:15] $end
$var wire 16 2# a [0:15] $end
$var reg 1 ; co $end
$var reg 16 3# g [0:15] $end
$var reg 16 4# p [0:15] $end
$var reg 16 5# y [0:15] $end
$upscope $end
$scope module carryFlag $end
$var wire 1 ! i_clock $end
$var wire 1 ; i_data $end
$var wire 1 6 i_w $end
$var reg 1 4 o_data $end
$upscope $end
$scope module flagMux $end
$var wire 16 6# i_val0 [0:15] $end
$var wire 16 7# w_1 [0:15] $end
$var wire 16 8# w_0 [0:15] $end
$var wire 16 9# o_val [0:15] $end
$var wire 16 :# i_val3 [0:15] $end
$var wire 16 ;# i_val2 [0:15] $end
$var wire 16 <# i_val1 [0:15] $end
$var wire 2 =# i_sel [0:1] $end
$scope module mux1 $end
$var wire 1 ># i_sel $end
$var wire 16 ?# i_val0 [0:15] $end
$var wire 16 @# o_val [0:15] $end
$var wire 16 A# i_val1 [0:15] $end
$scope module mux_bit0 $end
$var wire 1 ># i_sel $end
$var wire 1 B# i_val0 $end
$var wire 1 C# i_val1 $end
$var wire 1 D# o_val $end
$upscope $end
$scope module mux_bit1 $end
$var wire 1 ># i_sel $end
$var wire 1 E# i_val0 $end
$var wire 1 F# i_val1 $end
$var wire 1 G# o_val $end
$upscope $end
$scope module mux_bit10 $end
$var wire 1 ># i_sel $end
$var wire 1 H# i_val0 $end
$var wire 1 I# i_val1 $end
$var wire 1 J# o_val $end
$upscope $end
$scope module mux_bit11 $end
$var wire 1 ># i_sel $end
$var wire 1 K# i_val0 $end
$var wire 1 L# i_val1 $end
$var wire 1 M# o_val $end
$upscope $end
$scope module mux_bit12 $end
$var wire 1 ># i_sel $end
$var wire 1 N# i_val0 $end
$var wire 1 O# i_val1 $end
$var wire 1 P# o_val $end
$upscope $end
$scope module mux_bit13 $end
$var wire 1 ># i_sel $end
$var wire 1 Q# i_val0 $end
$var wire 1 R# i_val1 $end
$var wire 1 S# o_val $end
$upscope $end
$scope module mux_bit14 $end
$var wire 1 ># i_sel $end
$var wire 1 T# i_val0 $end
$var wire 1 U# i_val1 $end
$var wire 1 V# o_val $end
$upscope $end
$scope module mux_bit15 $end
$var wire 1 ># i_sel $end
$var wire 1 W# i_val0 $end
$var wire 1 X# i_val1 $end
$var wire 1 Y# o_val $end
$upscope $end
$scope module mux_bit2 $end
$var wire 1 ># i_sel $end
$var wire 1 Z# i_val0 $end
$var wire 1 [# i_val1 $end
$var wire 1 \# o_val $end
$upscope $end
$scope module mux_bit3 $end
$var wire 1 ># i_sel $end
$var wire 1 ]# i_val0 $end
$var wire 1 ^# i_val1 $end
$var wire 1 _# o_val $end
$upscope $end
$scope module mux_bit4 $end
$var wire 1 ># i_sel $end
$var wire 1 `# i_val0 $end
$var wire 1 a# i_val1 $end
$var wire 1 b# o_val $end
$upscope $end
$scope module mux_bit5 $end
$var wire 1 ># i_sel $end
$var wire 1 c# i_val0 $end
$var wire 1 d# i_val1 $end
$var wire 1 e# o_val $end
$upscope $end
$scope module mux_bit6 $end
$var wire 1 ># i_sel $end
$var wire 1 f# i_val0 $end
$var wire 1 g# i_val1 $end
$var wire 1 h# o_val $end
$upscope $end
$scope module mux_bit7 $end
$var wire 1 ># i_sel $end
$var wire 1 i# i_val0 $end
$var wire 1 j# i_val1 $end
$var wire 1 k# o_val $end
$upscope $end
$scope module mux_bit8 $end
$var wire 1 ># i_sel $end
$var wire 1 l# i_val0 $end
$var wire 1 m# i_val1 $end
$var wire 1 n# o_val $end
$upscope $end
$scope module mux_bit9 $end
$var wire 1 ># i_sel $end
$var wire 1 o# i_val0 $end
$var wire 1 p# i_val1 $end
$var wire 1 q# o_val $end
$upscope $end
$upscope $end
$scope module mux2 $end
$var wire 1 r# i_sel $end
$var wire 16 s# o_val [0:15] $end
$var wire 16 t# i_val1 [0:15] $end
$var wire 16 u# i_val0 [0:15] $end
$scope module mux_bit0 $end
$var wire 1 r# i_sel $end
$var wire 1 v# i_val0 $end
$var wire 1 w# i_val1 $end
$var wire 1 x# o_val $end
$upscope $end
$scope module mux_bit1 $end
$var wire 1 r# i_sel $end
$var wire 1 y# i_val0 $end
$var wire 1 z# i_val1 $end
$var wire 1 {# o_val $end
$upscope $end
$scope module mux_bit10 $end
$var wire 1 r# i_sel $end
$var wire 1 |# i_val0 $end
$var wire 1 }# i_val1 $end
$var wire 1 ~# o_val $end
$upscope $end
$scope module mux_bit11 $end
$var wire 1 r# i_sel $end
$var wire 1 !$ i_val0 $end
$var wire 1 "$ i_val1 $end
$var wire 1 #$ o_val $end
$upscope $end
$scope module mux_bit12 $end
$var wire 1 r# i_sel $end
$var wire 1 $$ i_val0 $end
$var wire 1 %$ i_val1 $end
$var wire 1 &$ o_val $end
$upscope $end
$scope module mux_bit13 $end
$var wire 1 r# i_sel $end
$var wire 1 '$ i_val0 $end
$var wire 1 ($ i_val1 $end
$var wire 1 )$ o_val $end
$upscope $end
$scope module mux_bit14 $end
$var wire 1 r# i_sel $end
$var wire 1 *$ i_val0 $end
$var wire 1 +$ i_val1 $end
$var wire 1 ,$ o_val $end
$upscope $end
$scope module mux_bit15 $end
$var wire 1 r# i_sel $end
$var wire 1 -$ i_val0 $end
$var wire 1 .$ i_val1 $end
$var wire 1 /$ o_val $end
$upscope $end
$scope module mux_bit2 $end
$var wire 1 r# i_sel $end
$var wire 1 0$ i_val0 $end
$var wire 1 1$ i_val1 $end
$var wire 1 2$ o_val $end
$upscope $end
$scope module mux_bit3 $end
$var wire 1 r# i_sel $end
$var wire 1 3$ i_val0 $end
$var wire 1 4$ i_val1 $end
$var wire 1 5$ o_val $end
$upscope $end
$scope module mux_bit4 $end
$var wire 1 r# i_sel $end
$var wire 1 6$ i_val0 $end
$var wire 1 7$ i_val1 $end
$var wire 1 8$ o_val $end
$upscope $end
$scope module mux_bit5 $end
$var wire 1 r# i_sel $end
$var wire 1 9$ i_val0 $end
$var wire 1 :$ i_val1 $end
$var wire 1 ;$ o_val $end
$upscope $end
$scope module mux_bit6 $end
$var wire 1 r# i_sel $end
$var wire 1 <$ i_val0 $end
$var wire 1 =$ i_val1 $end
$var wire 1 >$ o_val $end
$upscope $end
$scope module mux_bit7 $end
$var wire 1 r# i_sel $end
$var wire 1 ?$ i_val0 $end
$var wire 1 @$ i_val1 $end
$var wire 1 A$ o_val $end
$upscope $end
$scope module mux_bit8 $end
$var wire 1 r# i_sel $end
$var wire 1 B$ i_val0 $end
$var wire 1 C$ i_val1 $end
$var wire 1 D$ o_val $end
$upscope $end
$scope module mux_bit9 $end
$var wire 1 r# i_sel $end
$var wire 1 E$ i_val0 $end
$var wire 1 F$ i_val1 $end
$var wire 1 G$ o_val $end
$upscope $end
$upscope $end
$scope module mux3 $end
$var wire 1 H$ i_sel $end
$var wire 16 I$ i_val0 [0:15] $end
$var wire 16 J$ i_val1 [0:15] $end
$var wire 16 K$ o_val [0:15] $end
$scope module mux_bit0 $end
$var wire 1 H$ i_sel $end
$var wire 1 L$ i_val0 $end
$var wire 1 M$ i_val1 $end
$var wire 1 N$ o_val $end
$upscope $end
$scope module mux_bit1 $end
$var wire 1 H$ i_sel $end
$var wire 1 O$ i_val0 $end
$var wire 1 P$ i_val1 $end
$var wire 1 Q$ o_val $end
$upscope $end
$scope module mux_bit10 $end
$var wire 1 H$ i_sel $end
$var wire 1 R$ i_val0 $end
$var wire 1 S$ i_val1 $end
$var wire 1 T$ o_val $end
$upscope $end
$scope module mux_bit11 $end
$var wire 1 H$ i_sel $end
$var wire 1 U$ i_val0 $end
$var wire 1 V$ i_val1 $end
$var wire 1 W$ o_val $end
$upscope $end
$scope module mux_bit12 $end
$var wire 1 H$ i_sel $end
$var wire 1 X$ i_val0 $end
$var wire 1 Y$ i_val1 $end
$var wire 1 Z$ o_val $end
$upscope $end
$scope module mux_bit13 $end
$var wire 1 H$ i_sel $end
$var wire 1 [$ i_val0 $end
$var wire 1 \$ i_val1 $end
$var wire 1 ]$ o_val $end
$upscope $end
$scope module mux_bit14 $end
$var wire 1 H$ i_sel $end
$var wire 1 ^$ i_val0 $end
$var wire 1 _$ i_val1 $end
$var wire 1 `$ o_val $end
$upscope $end
$scope module mux_bit15 $end
$var wire 1 H$ i_sel $end
$var wire 1 a$ i_val0 $end
$var wire 1 b$ i_val1 $end
$var wire 1 c$ o_val $end
$upscope $end
$scope module mux_bit2 $end
$var wire 1 H$ i_sel $end
$var wire 1 d$ i_val0 $end
$var wire 1 e$ i_val1 $end
$var wire 1 f$ o_val $end
$upscope $end
$scope module mux_bit3 $end
$var wire 1 H$ i_sel $end
$var wire 1 g$ i_val0 $end
$var wire 1 h$ i_val1 $end
$var wire 1 i$ o_val $end
$upscope $end
$scope module mux_bit4 $end
$var wire 1 H$ i_sel $end
$var wire 1 j$ i_val0 $end
$var wire 1 k$ i_val1 $end
$var wire 1 l$ o_val $end
$upscope $end
$scope module mux_bit5 $end
$var wire 1 H$ i_sel $end
$var wire 1 m$ i_val0 $end
$var wire 1 n$ i_val1 $end
$var wire 1 o$ o_val $end
$upscope $end
$scope module mux_bit6 $end
$var wire 1 H$ i_sel $end
$var wire 1 p$ i_val0 $end
$var wire 1 q$ i_val1 $end
$var wire 1 r$ o_val $end
$upscope $end
$scope module mux_bit7 $end
$var wire 1 H$ i_sel $end
$var wire 1 s$ i_val0 $end
$var wire 1 t$ i_val1 $end
$var wire 1 u$ o_val $end
$upscope $end
$scope module mux_bit8 $end
$var wire 1 H$ i_sel $end
$var wire 1 v$ i_val0 $end
$var wire 1 w$ i_val1 $end
$var wire 1 x$ o_val $end
$upscope $end
$scope module mux_bit9 $end
$var wire 1 H$ i_sel $end
$var wire 1 y$ i_val0 $end
$var wire 1 z$ i_val1 $end
$var wire 1 {$ o_val $end
$upscope $end
$upscope $end
$upscope $end
$scope module ip $end
$var wire 16 |$ bus [0:15] $end
$var wire 1 ! i_clock $end
$var wire 16 }$ i_data [0:15] $end
$var wire 1 ~$ i_s $end
$var wire 1 !% i_w $end
$var reg 16 "% o_data [0:15] $end
$scope module m $end
$var wire 1 ~$ i_sel $end
$var wire 16 #% i_val0 [0:15] $end
$var wire 16 $% i_val1 [0:15] $end
$var wire 16 %% o_val [0:15] $end
$scope module mux_bit0 $end
$var wire 1 ~$ i_sel $end
$var wire 1 &% i_val0 $end
$var wire 1 '% i_val1 $end
$var wire 1 (% o_val $end
$upscope $end
$scope module mux_bit1 $end
$var wire 1 ~$ i_sel $end
$var wire 1 )% i_val0 $end
$var wire 1 *% i_val1 $end
$var wire 1 +% o_val $end
$upscope $end
$scope module mux_bit10 $end
$var wire 1 ~$ i_sel $end
$var wire 1 ,% i_val0 $end
$var wire 1 -% i_val1 $end
$var wire 1 .% o_val $end
$upscope $end
$scope module mux_bit11 $end
$var wire 1 ~$ i_sel $end
$var wire 1 /% i_val0 $end
$var wire 1 0% i_val1 $end
$var wire 1 1% o_val $end
$upscope $end
$scope module mux_bit12 $end
$var wire 1 ~$ i_sel $end
$var wire 1 2% i_val0 $end
$var wire 1 3% i_val1 $end
$var wire 1 4% o_val $end
$upscope $end
$scope module mux_bit13 $end
$var wire 1 ~$ i_sel $end
$var wire 1 5% i_val0 $end
$var wire 1 6% i_val1 $end
$var wire 1 7% o_val $end
$upscope $end
$scope module mux_bit14 $end
$var wire 1 ~$ i_sel $end
$var wire 1 8% i_val0 $end
$var wire 1 9% i_val1 $end
$var wire 1 :% o_val $end
$upscope $end
$scope module mux_bit15 $end
$var wire 1 ~$ i_sel $end
$var wire 1 ;% i_val0 $end
$var wire 1 <% i_val1 $end
$var wire 1 =% o_val $end
$upscope $end
$scope module mux_bit2 $end
$var wire 1 ~$ i_sel $end
$var wire 1 >% i_val0 $end
$var wire 1 ?% i_val1 $end
$var wire 1 @% o_val $end
$upscope $end
$scope module mux_bit3 $end
$var wire 1 ~$ i_sel $end
$var wire 1 A% i_val0 $end
$var wire 1 B% i_val1 $end
$var wire 1 C% o_val $end
$upscope $end
$scope module mux_bit4 $end
$var wire 1 ~$ i_sel $end
$var wire 1 D% i_val0 $end
$var wire 1 E% i_val1 $end
$var wire 1 F% o_val $end
$upscope $end
$scope module mux_bit5 $end
$var wire 1 ~$ i_sel $end
$var wire 1 G% i_val0 $end
$var wire 1 H% i_val1 $end
$var wire 1 I% o_val $end
$upscope $end
$scope module mux_bit6 $end
$var wire 1 ~$ i_sel $end
$var wire 1 J% i_val0 $end
$var wire 1 K% i_val1 $end
$var wire 1 L% o_val $end
$upscope $end
$scope module mux_bit7 $end
$var wire 1 ~$ i_sel $end
$var wire 1 M% i_val0 $end
$var wire 1 N% i_val1 $end
$var wire 1 O% o_val $end
$upscope $end
$scope module mux_bit8 $end
$var wire 1 ~$ i_sel $end
$var wire 1 P% i_val0 $end
$var wire 1 Q% i_val1 $end
$var wire 1 R% o_val $end
$upscope $end
$scope module mux_bit9 $end
$var wire 1 ~$ i_sel $end
$var wire 1 S% i_val0 $end
$var wire 1 T% i_val1 $end
$var wire 1 U% o_val $end
$upscope $end
$upscope $end
$upscope $end
$scope module ipIncrementer $end
$var wire 1 V% i_clock $end
$var wire 1 W% i_dir $end
$var wire 16 X% i_in [0:15] $end
$var reg 16 Y% o_out [0:15] $end
$upscope $end
$scope module registerR $end
$var wire 16 Z% bus [0:15] $end
$var wire 1 ! i_clock $end
$var wire 16 [% i_data [0:15] $end
$var wire 1 = i_w $end
$var wire 1 > i_s $end
$var reg 16 \% o_data [0:15] $end
$scope module m $end
$var wire 16 ]% i_val0 [0:15] $end
$var wire 16 ^% i_val1 [0:15] $end
$var wire 16 _% o_val [0:15] $end
$var wire 1 > i_sel $end
$scope module mux_bit0 $end
$var wire 1 `% i_val0 $end
$var wire 1 a% i_val1 $end
$var wire 1 b% o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit1 $end
$var wire 1 c% i_val0 $end
$var wire 1 d% i_val1 $end
$var wire 1 e% o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit10 $end
$var wire 1 f% i_val0 $end
$var wire 1 g% i_val1 $end
$var wire 1 h% o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit11 $end
$var wire 1 i% i_val0 $end
$var wire 1 j% i_val1 $end
$var wire 1 k% o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit12 $end
$var wire 1 l% i_val0 $end
$var wire 1 m% i_val1 $end
$var wire 1 n% o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit13 $end
$var wire 1 o% i_val0 $end
$var wire 1 p% i_val1 $end
$var wire 1 q% o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit14 $end
$var wire 1 r% i_val0 $end
$var wire 1 s% i_val1 $end
$var wire 1 t% o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit15 $end
$var wire 1 u% i_val0 $end
$var wire 1 v% i_val1 $end
$var wire 1 w% o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit2 $end
$var wire 1 x% i_val0 $end
$var wire 1 y% i_val1 $end
$var wire 1 z% o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit3 $end
$var wire 1 {% i_val0 $end
$var wire 1 |% i_val1 $end
$var wire 1 }% o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit4 $end
$var wire 1 ~% i_val0 $end
$var wire 1 !& i_val1 $end
$var wire 1 "& o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit5 $end
$var wire 1 #& i_val0 $end
$var wire 1 $& i_val1 $end
$var wire 1 %& o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit6 $end
$var wire 1 && i_val0 $end
$var wire 1 '& i_val1 $end
$var wire 1 (& o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit7 $end
$var wire 1 )& i_val0 $end
$var wire 1 *& i_val1 $end
$var wire 1 +& o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit8 $end
$var wire 1 ,& i_val0 $end
$var wire 1 -& i_val1 $end
$var wire 1 .& o_val $end
$var wire 1 > i_sel $end
$upscope $end
$scope module mux_bit9 $end
$var wire 1 /& i_val0 $end
$var wire 1 0& i_val1 $end
$var wire 1 1& o_val $end
$var wire 1 > i_sel $end
$upscope $end
$upscope $end
$upscope $end
$scope module registerT $end
$var wire 16 2& bus [0:15] $end
$var wire 1 ! i_clock $end
$var wire 16 3& i_data [0:15] $end
$var wire 1 4& i_s $end
$var wire 1 $ i_w $end
$var reg 16 5& o_data [0:15] $end
$scope module m $end
$var wire 1 4& i_sel $end
$var wire 16 6& i_val0 [0:15] $end
$var wire 16 7& i_val1 [0:15] $end
$var wire 16 8& o_val [0:15] $end
$scope module mux_bit0 $end
$var wire 1 4& i_sel $end
$var wire 1 9& i_val0 $end
$var wire 1 :& i_val1 $end
$var wire 1 ;& o_val $end
$upscope $end
$scope module mux_bit1 $end
$var wire 1 4& i_sel $end
$var wire 1 <& i_val0 $end
$var wire 1 =& i_val1 $end
$var wire 1 >& o_val $end
$upscope $end
$scope module mux_bit10 $end
$var wire 1 4& i_sel $end
$var wire 1 ?& i_val0 $end
$var wire 1 @& i_val1 $end
$var wire 1 A& o_val $end
$upscope $end
$scope module mux_bit11 $end
$var wire 1 4& i_sel $end
$var wire 1 B& i_val0 $end
$var wire 1 C& i_val1 $end
$var wire 1 D& o_val $end
$upscope $end
$scope module mux_bit12 $end
$var wire 1 4& i_sel $end
$var wire 1 E& i_val0 $end
$var wire 1 F& i_val1 $end
$var wire 1 G& o_val $end
$upscope $end
$scope module mux_bit13 $end
$var wire 1 4& i_sel $end
$var wire 1 H& i_val0 $end
$var wire 1 I& i_val1 $end
$var wire 1 J& o_val $end
$upscope $end
$scope module mux_bit14 $end
$var wire 1 4& i_sel $end
$var wire 1 K& i_val0 $end
$var wire 1 L& i_val1 $end
$var wire 1 M& o_val $end
$upscope $end
$scope module mux_bit15 $end
$var wire 1 4& i_sel $end
$var wire 1 N& i_val0 $end
$var wire 1 O& i_val1 $end
$var wire 1 P& o_val $end
$upscope $end
$scope module mux_bit2 $end
$var wire 1 4& i_sel $end
$var wire 1 Q& i_val0 $end
$var wire 1 R& i_val1 $end
$var wire 1 S& o_val $end
$upscope $end
$scope module mux_bit3 $end
$var wire 1 4& i_sel $end
$var wire 1 T& i_val0 $end
$var wire 1 U& i_val1 $end
$var wire 1 V& o_val $end
$upscope $end
$scope module mux_bit4 $end
$var wire 1 4& i_sel $end
$var wire 1 W& i_val0 $end
$var wire 1 X& i_val1 $end
$var wire 1 Y& o_val $end
$upscope $end
$scope module mux_bit5 $end
$var wire 1 4& i_sel $end
$var wire 1 Z& i_val0 $end
$var wire 1 [& i_val1 $end
$var wire 1 \& o_val $end
$upscope $end
$scope module mux_bit6 $end
$var wire 1 4& i_sel $end
$var wire 1 ]& i_val0 $end
$var wire 1 ^& i_val1 $end
$var wire 1 _& o_val $end
$upscope $end
$scope module mux_bit7 $end
$var wire 1 4& i_sel $end
$var wire 1 `& i_val0 $end
$var wire 1 a& i_val1 $end
$var wire 1 b& o_val $end
$upscope $end
$scope module mux_bit8 $end
$var wire 1 4& i_sel $end
$var wire 1 c& i_val0 $end
$var wire 1 d& i_val1 $end
$var wire 1 e& o_val $end
$upscope $end
$scope module mux_bit9 $end
$var wire 1 4& i_sel $end
$var wire 1 f& i_val0 $end
$var wire 1 g& i_val1 $end
$var wire 1 h& o_val $end
$upscope $end
$upscope $end
$upscope $end
$scope module rom $end
$var wire 16 i& i_addr [0:15] $end
$var wire 18 j& o_instr [0:17] $end
$upscope $end
$scope module sp $end
$var wire 16 k& bus [0:15] $end
$var wire 1 ! i_clock $end
$var wire 1 l& shouldSet $end
$var wire 16 m& tempInc [0:15] $end
$var wire 16 n& o_topAddr [0:15] $end
$var wire 3 o& i_ctrl [0:2] $end
$scope module inc $end
$var wire 1 ! i_clock $end
$var wire 1 p& i_dir $end
$var wire 16 q& i_in [0:15] $end
$var reg 16 r& o_out [0:15] $end
$upscope $end
$scope module top $end
$var wire 16 s& bus [0:15] $end
$var wire 1 ! i_clock $end
$var wire 16 t& i_data [0:15] $end
$var wire 1 u& i_s $end
$var wire 1 l& i_w $end
$var reg 16 v& o_data [0:15] $end
$scope module m $end
$var wire 1 u& i_sel $end
$var wire 16 w& i_val0 [0:15] $end
$var wire 16 x& i_val1 [0:15] $end
$var wire 16 y& o_val [0:15] $end
$scope module mux_bit0 $end
$var wire 1 u& i_sel $end
$var wire 1 z& i_val0 $end
$var wire 1 {& i_val1 $end
$var wire 1 |& o_val $end
$upscope $end
$scope module mux_bit1 $end
$var wire 1 u& i_sel $end
$var wire 1 }& i_val0 $end
$var wire 1 ~& i_val1 $end
$var wire 1 !' o_val $end
$upscope $end
$scope module mux_bit10 $end
$var wire 1 u& i_sel $end
$var wire 1 "' i_val0 $end
$var wire 1 #' i_val1 $end
$var wire 1 $' o_val $end
$upscope $end
$scope module mux_bit11 $end
$var wire 1 u& i_sel $end
$var wire 1 %' i_val0 $end
$var wire 1 &' i_val1 $end
$var wire 1 '' o_val $end
$upscope $end
$scope module mux_bit12 $end
$var wire 1 u& i_sel $end
$var wire 1 (' i_val0 $end
$var wire 1 )' i_val1 $end
$var wire 1 *' o_val $end
$upscope $end
$scope module mux_bit13 $end
$var wire 1 u& i_sel $end
$var wire 1 +' i_val0 $end
$var wire 1 ,' i_val1 $end
$var wire 1 -' o_val $end
$upscope $end
$scope module mux_bit14 $end
$var wire 1 u& i_sel $end
$var wire 1 .' i_val0 $end
$var wire 1 /' i_val1 $end
$var wire 1 0' o_val $end
$upscope $end
$scope module mux_bit15 $end
$var wire 1 u& i_sel $end
$var wire 1 1' i_val0 $end
$var wire 1 2' i_val1 $end
$var wire 1 3' o_val $end
$upscope $end
$scope module mux_bit2 $end
$var wire 1 u& i_sel $end
$var wire 1 4' i_val0 $end
$var wire 1 5' i_val1 $end
$var wire 1 6' o_val $end
$upscope $end
$scope module mux_bit3 $end
$var wire 1 u& i_sel $end
$var wire 1 7' i_val0 $end
$var wire 1 8' i_val1 $end
$var wire 1 9' o_val $end
$upscope $end
$scope module mux_bit4 $end
$var wire 1 u& i_sel $end
$var wire 1 :' i_val0 $end
$var wire 1 ;' i_val1 $end
$var wire 1 <' o_val $end
$upscope $end
$scope module mux_bit5 $end
$var wire 1 u& i_sel $end
$var wire 1 =' i_val0 $end
$var wire 1 >' i_val1 $end
$var wire 1 ?' o_val $end
$upscope $end
$scope module mux_bit6 $end
$var wire 1 u& i_sel $end
$var wire 1 @' i_val0 $end
$var wire 1 A' i_val1 $end
$var wire 1 B' o_val $end
$upscope $end
$scope module mux_bit7 $end
$var wire 1 u& i_sel $end
$var wire 1 C' i_val0 $end
$var wire 1 D' i_val1 $end
$var wire 1 E' o_val $end
$upscope $end
$scope module mux_bit8 $end
$var wire 1 u& i_sel $end
$var wire 1 F' i_val0 $end
$var wire 1 G' i_val1 $end
$var wire 1 H' o_val $end
$upscope $end
$scope module mux_bit9 $end
$var wire 1 u& i_sel $end
$var wire 1 I' i_val0 $end
$var wire 1 J' i_val1 $end
$var wire 1 K' o_val $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module stack $end
$var wire 16 L' bus [0:15] $end
$var wire 16 M' i_addr [0:15] $end
$var wire 1 ! i_clock $end
$var wire 1 & i_w $end
$var wire 1 ' i_s $end
$var reg 16 N' o_top [0:15] $end
$scope module m $end
$var wire 16 O' i_val0 [0:15] $end
$var wire 16 P' i_val1 [0:15] $end
$var wire 16 Q' o_val [0:15] $end
$var wire 1 ' i_sel $end
$scope module mux_bit0 $end
$var wire 1 R' i_val0 $end
$var wire 1 S' i_val1 $end
$var wire 1 T' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit1 $end
$var wire 1 U' i_val0 $end
$var wire 1 V' i_val1 $end
$var wire 1 W' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit10 $end
$var wire 1 X' i_val0 $end
$var wire 1 Y' i_val1 $end
$var wire 1 Z' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit11 $end
$var wire 1 [' i_val0 $end
$var wire 1 \' i_val1 $end
$var wire 1 ]' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit12 $end
$var wire 1 ^' i_val0 $end
$var wire 1 _' i_val1 $end
$var wire 1 `' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit13 $end
$var wire 1 a' i_val0 $end
$var wire 1 b' i_val1 $end
$var wire 1 c' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit14 $end
$var wire 1 d' i_val0 $end
$var wire 1 e' i_val1 $end
$var wire 1 f' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit15 $end
$var wire 1 g' i_val0 $end
$var wire 1 h' i_val1 $end
$var wire 1 i' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit2 $end
$var wire 1 j' i_val0 $end
$var wire 1 k' i_val1 $end
$var wire 1 l' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit3 $end
$var wire 1 m' i_val0 $end
$var wire 1 n' i_val1 $end
$var wire 1 o' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit4 $end
$var wire 1 p' i_val0 $end
$var wire 1 q' i_val1 $end
$var wire 1 r' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit5 $end
$var wire 1 s' i_val0 $end
$var wire 1 t' i_val1 $end
$var wire 1 u' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit6 $end
$var wire 1 v' i_val0 $end
$var wire 1 w' i_val1 $end
$var wire 1 x' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit7 $end
$var wire 1 y' i_val0 $end
$var wire 1 z' i_val1 $end
$var wire 1 {' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit8 $end
$var wire 1 |' i_val0 $end
$var wire 1 }' i_val1 $end
$var wire 1 ~' o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$scope module mux_bit9 $end
$var wire 1 !( i_val0 $end
$var wire 1 "( i_val1 $end
$var wire 1 #( o_val $end
$var wire 1 ' i_sel $end
$upscope $end
$upscope $end
$upscope $end
$scope module the_controlunit $end
$var wire 18 $( i_instruction [0:17] $end
$var wire 1 > o_RSCtrl $end
$var wire 1 = o_RWCtrl $end
$var wire 1 < o_TIn $end
$var wire 1 6 o_carryWCtrl $end
$var wire 1 0 o_instrTypeCtrl $end
$var wire 6 %( o_jCtrl [0:5] $end
$var wire 1 ( o_stkAddrSel $end
$var wire 1 ' o_stkSCtrl $end
$var wire 1 & o_stkWCtrl $end
$var wire 3 &( o_spCtrl [0:2] $end
$var wire 2 '( o_jSelCtrl [0:1] $end
$var wire 5 (( o_instrOP [0:4] $end
$upscope $end
$scope module the_jumpassist $end
$var wire 1 4 i_carry $end
$var wire 16 )( i_jCondVal [0:15] $end
$var wire 6 *( i_jCtrl [0:5] $end
$var wire 3 +( w_SZC [0:2] $end
$var wire 1 5 o_cond $end
$scope module jMux $end
$var wire 3 ,( i_sel [0:2] $end
$var wire 8 -( i_val [0:7] $end
$var wire 1 .( w_1 $end
$var wire 1 /( w_0 $end
$var wire 1 5 o_val $end
$scope module mux2_2 $end
$var wire 1 0( i_sel $end
$var wire 1 5 o_val $end
$var wire 1 .( i_val1 $end
$var wire 1 /( i_val0 $end
$upscope $end
$scope module mux4_0 $end
$var wire 2 1( i_sel [0:1] $end
$var wire 4 2( i_val [0:3] $end
$var wire 1 3( w_1 $end
$var wire 1 4( w_0 $end
$var wire 1 /( o_val $end
$scope module mux2_0 $end
$var wire 1 5( i_sel $end
$var wire 1 6( i_val0 $end
$var wire 1 7( i_val1 $end
$var wire 1 4( o_val $end
$upscope $end
$scope module mux2_1 $end
$var wire 1 8( i_sel $end
$var wire 1 9( i_val0 $end
$var wire 1 :( i_val1 $end
$var wire 1 3( o_val $end
$upscope $end
$scope module mux2_2 $end
$var wire 1 ;( i_sel $end
$var wire 1 4( i_val0 $end
$var wire 1 3( i_val1 $end
$var wire 1 /( o_val $end
$upscope $end
$upscope $end
$scope module mux4_1 $end
$var wire 2 <( i_sel [0:1] $end
$var wire 4 =( i_val [0:3] $end
$var wire 1 >( w_1 $end
$var wire 1 ?( w_0 $end
$var wire 1 .( o_val $end
$scope module mux2_0 $end
$var wire 1 @( i_sel $end
$var wire 1 A( i_val0 $end
$var wire 1 B( i_val1 $end
$var wire 1 ?( o_val $end
$upscope $end
$scope module mux2_1 $end
$var wire 1 C( i_sel $end
$var wire 1 D( i_val0 $end
$var wire 1 E( i_val1 $end
$var wire 1 >( o_val $end
$upscope $end
$scope module mux2_2 $end
$var wire 1 F( i_sel $end
$var wire 1 ?( i_val0 $end
$var wire 1 >( i_val1 $end
$var wire 1 .( o_val $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xF(
0E(
0D(
xC(
0B(
1A(
x@(
x?(
0>(
b1000 =(
bx <(
x;(
1:(
19(
x8(
17(
16(
x5(
14(
13(
b1111 2(
bx 1(
x0(
1/(
x.(
b11111000 -(
bx ,(
bx +(
b111000 *(
bx )(
b0 ((
b0 '(
b0 &(
b111000 %(
b111000 $(
x#(
z"(
x!(
x~'
z}'
x|'
x{'
zz'
xy'
xx'
zw'
xv'
xu'
zt'
xs'
xr'
zq'
xp'
xo'
zn'
xm'
xl'
zk'
xj'
xi'
zh'
xg'
xf'
ze'
xd'
xc'
zb'
xa'
x`'
z_'
x^'
x]'
z\'
x['
xZ'
zY'
xX'
xW'
zV'
xU'
xT'
zS'
xR'
bx Q'
bz P'
bx O'
bx N'
bz M'
bx L'
zK'
0J'
zI'
zH'
0G'
zF'
zE'
0D'
zC'
zB'
0A'
z@'
z?'
0>'
z='
z<'
0;'
z:'
z9'
08'
z7'
z6'
05'
z4'
z3'
02'
z1'
z0'
0/'
z.'
z-'
0,'
z+'
z*'
0)'
z('
z''
0&'
z%'
z$'
0#'
z"'
z!'
0~&
z}&
z|&
0{&
zz&
bx y&
b0 x&
bz w&
b0 v&
0u&
bx t&
bx s&
bx r&
b0 q&
0p&
b0 o&
b0 n&
bx m&
0l&
bx k&
b111000 j&
b0 i&
zh&
xg&
zf&
ze&
xd&
zc&
zb&
xa&
z`&
z_&
x^&
z]&
z\&
x[&
zZ&
zY&
xX&
zW&
zV&
xU&
zT&
zS&
xR&
zQ&
zP&
xO&
zN&
zM&
xL&
zK&
zJ&
xI&
zH&
zG&
xF&
zE&
zD&
xC&
zB&
zA&
x@&
z?&
z>&
x=&
z<&
z;&
x:&
z9&
bx 8&
bx 7&
bz 6&
bx 5&
04&
bx 3&
bx 2&
x1&
x0&
z/&
x.&
x-&
z,&
x+&
x*&
z)&
x(&
x'&
z&&
x%&
x$&
z#&
x"&
x!&
z~%
x}%
x|%
z{%
xz%
xy%
zx%
xw%
xv%
zu%
xt%
xs%
zr%
xq%
xp%
zo%
xn%
xm%
zl%
xk%
xj%
zi%
xh%
xg%
zf%
xe%
xd%
zc%
xb%
xa%
z`%
bx _%
bx ^%
bz ]%
bx \%
bx [%
bx Z%
bx Y%
b0 X%
1W%
zV%
zU%
0T%
zS%
zR%
0Q%
zP%
zO%
0N%
zM%
zL%
0K%
zJ%
zI%
0H%
zG%
zF%
0E%
zD%
zC%
0B%
zA%
z@%
0?%
z>%
z=%
0<%
z;%
z:%
09%
z8%
z7%
06%
z5%
z4%
03%
z2%
z1%
00%
z/%
z.%
0-%
z,%
z+%
0*%
z)%
z(%
0'%
z&%
bx %%
b0 $%
bz #%
b0 "%
1!%
0~$
bx }$
bx |$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
xL$
bx K$
bx J$
bx I$
0H$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
bx u#
bx t#
bx s#
0r#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
bx A#
bx @#
bx ?#
0>#
b0 =#
bx <#
bx ;#
bx :#
bx 9#
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
b1111111111111111 3#
bx 2#
bx 1#
b0 0#
0/#
x.#
x-#
0,#
x+#
x*#
0)#
x(#
x'#
0&#
x%#
x$#
0##
x"#
x!#
0~"
x}"
x|"
0{"
xz"
xy"
0x"
xw"
xv"
0u"
xt"
xs"
0r"
xq"
xp"
0o"
xn"
xm"
0l"
xk"
xj"
1i"
xh"
xg"
1f"
xe"
xd"
1c"
xb"
xa"
0`"
x_"
x^"
0]"
bx \"
bx ["
b111000 Z"
0Y"
xX"
0W"
0V"
xU"
0T"
0S"
xR"
0Q"
0P"
xO"
0N"
0M"
xL"
0K"
0J"
xI"
0H"
0G"
xF"
0E"
0D"
xC"
0B"
0A"
x@"
0?"
0>"
x="
0<"
0;"
x:"
09"
08"
x7"
06"
05"
x4"
03"
02"
x1"
00"
0/"
x."
0-"
0,"
x+"
0*"
b0 )"
bx ("
bx '"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
0y
0x
0w
0v
b0 u
b0 t
b0 s
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
bx B
bx A
bx @
bx ?
1>
0=
1<
x;
b0 :
bx 9
bx 8
bx 7
06
x5
x4
bx 3
b0 2
b0 1
00
bx /
b111000 .
b0 -
bx ,
b111000 +
b0 *
b0 )
0(
0'
0&
bz %
z$
bx #
bx "
0!
$end
#10
bx 3#
x|&
x!'
x$'
x''
x*'
x-'
x0'
x3'
x6'
x9'
x<'
x?'
xB'
xE'
xH'
xK'
x/(
xu&
x3(
x>(
xY"
xV"
xS"
xP"
xM"
xJ"
xG"
xD"
xA"
x>"
x;"
x8"
x5"
x2"
x/"
x,"
xl&
x>
x/#
bx 0#
x9(
x:(
xA(
xB(
xD(
xE(
x<
x(
x&
xp&
x0
x&"
x#"
x~
x{
bx :
bx t
xx
xH$
xr#
x>#
b11xx 2(
bx =(
x'
bx )
bx o&
bx &(
x=
x6
x$"
x!"
x|
xy
xv
bx -
bx =#
bx '(
b11xxxxxx -(
bx .
bx %(
bx *(
x]"
x`"
xu"
xx"
x{"
x~"
x##
x&#
x)#
x,#
xc"
xf"
xi"
xl"
xo"
xr"
x'%
x*%
x?%
xB%
xE%
xH%
xK%
xN%
xQ%
xT%
x-%
x0%
x3%
x6%
x9%
x<%
bx 1
bx u
bx ((
bx Z"
b1111111111111111 m&
b1111111111111111 r&
b1111111111111111 t&
bx +
bx j&
bx $(
bx 2
bx "%
bx $%
bx X%
bx i&
1!
#20
0!
#30
1!
#40
0!
#50
1!
#60
0!
#70
1!
#80
0!
#90
1!
#100
0!
#110
1!
#120
0!
#130
1!
#140
0!
#150
1!
#160
0!
#170
1!
#180
0!
#190
1!
#200
0!
#210
1!
#220
0!
#230
1!
#240
0!
